// <auto-generated />
using System;
using CardsServer.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CardsServer.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250202142340_UpdatePermissions")]
    partial class UpdatePermissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CardsServer.BLL.Entity.AvatarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Avatars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new byte[] { 255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 1, 44, 1, 44, 0, 0, 255, 225, 0, 86, 69, 120, 105, 102, 0, 0, 77, 77, 0, 42, 0, 0, 0, 8, 0, 4, 1, 26, 0, 5, 0, 0, 0, 1, 0, 0, 0, 62, 1, 27, 0, 5, 0, 0, 0, 1, 0, 0, 0, 70, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 2, 19, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 1, 0, 0, 1, 44, 0, 0, 0, 1, 255, 237, 0, 44, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 51, 46, 48, 0, 56, 66, 73, 77, 4, 4, 0, 0, 0, 0, 0, 15, 28, 1, 90, 0, 3, 27, 37, 71, 28, 1, 0, 0, 2, 0, 4, 0, 255, 225, 13, 110, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 0, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 98, 101, 103, 105, 110, 61, 39, 239, 187, 191, 39, 32, 105, 100, 61, 39, 87, 53, 77, 48, 77, 112, 67, 101, 104, 105, 72, 122, 114, 101, 83, 122, 78, 84, 99, 122, 107, 99, 57, 100, 39, 63, 62, 10, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 39, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 39, 32, 120, 58, 120, 109, 112, 116, 107, 61, 39, 73, 109, 97, 103, 101, 58, 58, 69, 120, 105, 102, 84, 111, 111, 108, 32, 49, 49, 46, 56, 56, 39, 62, 10, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 39, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 39, 62, 10, 10, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 39, 39, 10, 32, 32, 120, 109, 108, 110, 115, 58, 116, 105, 102, 102, 61, 39, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 116, 105, 102, 102, 47, 49, 46, 48, 47, 39, 62, 10, 32, 32, 60, 116, 105, 102, 102, 58, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 85, 110, 105, 116, 62, 50, 60, 47, 116, 105, 102, 102, 58, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 85, 110, 105, 116, 62, 10, 32, 32, 60, 116, 105, 102, 102, 58, 88, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 51, 48, 48, 47, 49, 60, 47, 116, 105, 102, 102, 58, 88, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 10, 32, 32, 60, 116, 105, 102, 102, 58, 89, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 51, 48, 48, 47, 49, 60, 47, 116, 105, 102, 102, 58, 89, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 62, 10, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 10, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 39, 39, 10, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 39, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 39, 62, 10, 32, 32, 60, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 65, 100, 111, 98, 101, 32, 83, 116, 111, 99, 107, 32, 80, 108, 97, 116, 102, 111, 114, 109, 60, 47, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 10, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 10, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 39, 39, 10, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 77, 77, 61, 39, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 109, 109, 47, 39, 62, 10, 32, 32, 60, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 120, 109, 112, 46, 105, 105, 100, 58, 97, 97, 52, 98, 53, 101, 101, 53, 45, 48, 49, 48, 53, 45, 52, 54, 102, 53, 45, 97, 55, 102, 56, 45, 48, 102, 97, 97, 48, 49, 102, 54, 52, 55, 51, 56, 60, 47, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 10, 32, 32, 60, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 97, 100, 111, 98, 101, 58, 100, 111, 99, 105, 100, 58, 115, 116, 111, 99, 107, 58, 56, 100, 99, 52, 56, 53, 53, 54, 45, 57, 102, 100, 100, 45, 52, 98, 52, 99, 45, 97, 56, 102, 56, 45, 99, 97, 57, 100, 53, 53, 99, 56, 52, 54, 97, 49, 60, 47, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 10, 32, 32, 60, 120, 109, 112, 77, 77, 58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 97, 100, 111, 98, 101, 58, 100, 111, 99, 105, 100, 58, 115, 116, 111, 99, 107, 58, 53, 52, 57, 57, 56, 51, 57, 55, 48, 60, 47, 120, 109, 112, 77, 77, 58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 10, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 10, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 101, 110, 100, 61, 39, 119, 39, 63, 62, 255, 219, 0, 67, 0, 5, 3, 4, 4, 4, 3, 5, 4, 4, 4, 5, 5, 5, 6, 7, 12, 8, 7, 7, 7, 7, 15, 11, 11, 9, 12, 17, 15, 18, 18, 17, 15, 17, 17, 19, 22, 28, 23, 19, 20, 26, 21, 17, 17, 24, 33, 24, 26, 29, 29, 31, 31, 31, 19, 23, 34, 36, 34, 30, 36, 28, 30, 31, 30, 255, 192, 0, 11, 8, 1, 104, 1, 104, 1, 1, 17, 0, 255, 196, 0, 28, 0, 1, 0, 2, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 1, 3, 5, 2, 7, 8, 255, 196, 0, 60, 16, 0, 2, 2, 1, 2, 2, 5, 11, 2, 3, 8, 3, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 17, 33, 81, 6, 18, 49, 65, 97, 19, 20, 34, 50, 82, 113, 129, 145, 161, 193, 209, 35, 66, 114, 177, 225, 21, 36, 51, 52, 83, 98, 99, 240, 37, 115, 131, 255, 218, 0, 8, 1, 1, 0, 0, 63, 0, 253, 150, 0, 0, 0, 0, 0, 2, 14, 94, 177, 166, 226, 238, 173, 203, 175, 172, 191, 108, 95, 89, 253, 14, 86, 79, 75, 49, 163, 186, 199, 198, 182, 207, 25, 53, 21, 247, 57, 215, 244, 167, 80, 159, 10, 235, 162, 165, 238, 114, 127, 82, 29, 186, 230, 171, 103, 173, 155, 98, 254, 20, 163, 252, 136, 182, 102, 230, 89, 235, 229, 223, 47, 125, 140, 212, 231, 55, 235, 78, 111, 223, 38, 121, 221, 243, 103, 168, 206, 113, 245, 103, 53, 238, 147, 54, 215, 155, 153, 95, 248, 121, 119, 199, 221, 99, 36, 213, 174, 106, 181, 246, 102, 217, 47, 226, 74, 95, 205, 19, 104, 233, 78, 161, 14, 22, 215, 69, 171, 220, 226, 254, 135, 71, 27, 165, 152, 210, 217, 100, 99, 91, 95, 140, 90, 146, 251, 29, 92, 77, 99, 77, 202, 217, 85, 151, 95, 89, 254, 217, 62, 171, 250, 147, 151, 30, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 231, 234, 56, 120, 81, 223, 38, 248, 193, 247, 71, 182, 79, 224, 87, 179, 250, 87, 55, 188, 112, 177, 212, 87, 183, 111, 111, 201, 28, 60, 205, 71, 55, 45, 191, 56, 201, 178, 105, 254, 221, 246, 143, 201, 17, 64, 0, 0, 0, 0, 149, 135, 168, 230, 225, 191, 238, 249, 54, 65, 123, 59, 239, 31, 147, 59, 152, 29, 43, 154, 218, 57, 184, 234, 75, 219, 171, 183, 228, 203, 14, 6, 163, 135, 157, 29, 241, 175, 140, 223, 124, 123, 36, 190, 4, 160, 0, 0, 0, 0, 0, 0, 0, 0, 16, 245, 45, 75, 15, 2, 29, 108, 139, 82, 147, 236, 130, 227, 39, 240, 42, 218, 159, 73, 115, 50, 55, 134, 50, 243, 106, 249, 174, 51, 127, 30, 239, 129, 196, 148, 165, 41, 57, 74, 78, 82, 125, 173, 189, 219, 48, 0, 0, 0, 0, 0, 0, 102, 18, 148, 36, 165, 25, 56, 201, 118, 52, 246, 104, 237, 233, 157, 37, 204, 199, 218, 25, 75, 206, 107, 230, 248, 77, 124, 123, 254, 37, 167, 77, 212, 176, 243, 225, 214, 199, 181, 57, 46, 216, 62, 18, 95, 2, 96, 0, 0, 0, 0, 0, 0, 0, 243, 109, 149, 213, 92, 172, 182, 113, 132, 34, 183, 114, 147, 217, 34, 173, 172, 116, 158, 82, 235, 83, 167, 45, 151, 99, 186, 75, 139, 247, 47, 187, 43, 118, 78, 118, 78, 83, 178, 114, 156, 229, 197, 202, 79, 118, 207, 32, 0, 0, 0, 0, 0, 0, 0, 122, 174, 115, 174, 106, 117, 206, 80, 156, 120, 169, 69, 236, 209, 100, 209, 186, 79, 40, 237, 78, 162, 183, 93, 138, 232, 174, 63, 21, 247, 69, 166, 155, 43, 182, 184, 217, 84, 227, 56, 73, 110, 165, 23, 186, 103, 160, 0, 0, 0, 0, 0, 2, 22, 173, 169, 227, 105, 212, 245, 238, 150, 243, 126, 165, 107, 214, 151, 253, 230, 82, 117, 109, 83, 43, 81, 179, 123, 165, 213, 173, 63, 70, 184, 250, 171, 242, 252, 72, 32, 0, 0, 0, 0, 0, 0, 0, 0, 4, 237, 39, 84, 202, 211, 173, 222, 153, 117, 171, 111, 210, 174, 94, 171, 252, 63, 18, 237, 164, 234, 120, 218, 141, 61, 122, 101, 180, 215, 175, 91, 245, 163, 255, 0, 121, 147, 64, 0, 0, 0, 0, 3, 145, 175, 235, 85, 105, 208, 117, 87, 181, 153, 45, 112, 143, 116, 124, 95, 224, 164, 228, 223, 118, 77, 242, 186, 251, 37, 101, 146, 237, 108, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 179, 26, 251, 177, 175, 141, 212, 88, 235, 178, 61, 141, 23, 110, 143, 235, 85, 106, 48, 242, 86, 109, 94, 74, 92, 99, 221, 47, 21, 248, 58, 224, 0, 0, 0, 0, 113, 58, 71, 173, 199, 6, 15, 31, 29, 169, 100, 201, 124, 32, 185, 191, 31, 2, 149, 100, 229, 100, 229, 57, 201, 202, 82, 123, 182, 222, 237, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 185, 202, 185, 198, 112, 147, 140, 162, 247, 82, 79, 102, 153, 117, 232, 222, 183, 28, 232, 121, 190, 67, 81, 201, 138, 248, 77, 115, 94, 62, 7, 108, 0, 0, 0, 3, 145, 210, 61, 98, 58, 117, 30, 78, 173, 165, 147, 53, 232, 175, 101, 123, 76, 163, 89, 57, 89, 57, 78, 114, 114, 148, 158, 242, 109, 241, 108, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 185, 202, 185, 198, 112, 147, 140, 162, 247, 77, 62, 41, 151, 158, 141, 234, 241, 212, 104, 242, 118, 181, 28, 152, 47, 73, 123, 75, 218, 71, 92, 0, 0, 0, 133, 172, 234, 21, 233, 216, 114, 186, 123, 74, 111, 133, 112, 246, 153, 243, 252, 155, 237, 201, 200, 157, 247, 77, 206, 201, 189, 219, 53, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 49, 111, 183, 27, 34, 23, 211, 55, 27, 32, 247, 76, 250, 6, 141, 168, 87, 168, 225, 171, 161, 180, 102, 184, 89, 15, 101, 147, 64, 0, 3, 205, 214, 66, 170, 165, 109, 146, 81, 132, 22, 242, 111, 185, 31, 62, 214, 245, 9, 234, 57, 178, 185, 238, 171, 92, 43, 143, 37, 249, 100, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 218, 38, 161, 61, 59, 53, 92, 183, 117, 203, 133, 145, 230, 191, 40, 250, 13, 54, 66, 234, 163, 109, 114, 82, 132, 146, 113, 107, 189, 30, 128, 0, 21, 78, 153, 234, 93, 105, 127, 103, 83, 46, 11, 103, 115, 93, 239, 186, 63, 127, 145, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 205, 208, 189, 75, 171, 39, 167, 93, 46, 15, 141, 45, 247, 62, 248, 253, 254, 101, 172, 0, 8, 122, 198, 108, 112, 52, 251, 50, 37, 179, 146, 91, 65, 115, 147, 236, 62, 119, 100, 231, 101, 146, 178, 201, 57, 78, 77, 185, 55, 222, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 154, 231, 58, 236, 141, 149, 201, 198, 113, 105, 197, 174, 230, 143, 162, 104, 217, 177, 207, 211, 235, 200, 91, 41, 53, 180, 215, 41, 46, 210, 96, 0, 165, 116, 199, 59, 206, 53, 15, 54, 132, 183, 174, 142, 15, 198, 93, 255, 0, 46, 207, 153, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 231, 67, 115, 252, 223, 80, 120, 179, 151, 233, 223, 193, 120, 75, 187, 231, 217, 242, 46, 160, 17, 117, 108, 181, 133, 167, 93, 146, 246, 222, 49, 244, 87, 57, 62, 195, 231, 50, 148, 165, 39, 41, 54, 228, 222, 237, 190, 246, 96, 0, 0, 0, 0, 0, 4, 204, 77, 47, 55, 37, 41, 66, 151, 24, 191, 221, 63, 69, 29, 42, 58, 59, 195, 123, 178, 126, 16, 143, 221, 146, 161, 160, 224, 197, 113, 119, 73, 248, 207, 111, 177, 233, 232, 122, 127, 177, 98, 255, 0, 232, 205, 54, 116, 127, 21, 255, 0, 135, 117, 176, 247, 236, 200, 89, 26, 6, 84, 55, 116, 217, 93, 171, 151, 170, 206, 101, 244, 93, 68, 250, 151, 85, 58, 229, 202, 72, 214, 0, 0, 0, 0, 0, 3, 49, 148, 161, 37, 40, 182, 164, 158, 233, 242, 103, 209, 180, 140, 181, 155, 167, 85, 146, 182, 222, 81, 244, 151, 41, 46, 210, 80, 42, 157, 57, 203, 222, 116, 225, 69, 240, 95, 169, 63, 127, 98, 251, 149, 144, 0, 0, 0, 0, 0, 151, 167, 105, 249, 25, 178, 253, 53, 213, 173, 118, 205, 246, 47, 201, 100, 192, 210, 241, 113, 18, 106, 30, 82, 207, 110, 107, 119, 240, 228, 77, 0, 0, 121, 182, 186, 237, 131, 133, 176, 140, 226, 251, 84, 150, 232, 226, 106, 58, 10, 217, 217, 132, 246, 127, 233, 201, 255, 0, 38, 112, 103, 9, 66, 110, 19, 139, 140, 162, 246, 105, 173, 154, 48, 0, 0, 0, 0, 0, 22, 110, 130, 229, 237, 59, 176, 164, 248, 63, 212, 135, 191, 177, 253, 139, 88, 238, 62, 113, 171, 100, 188, 189, 75, 35, 35, 125, 212, 166, 250, 191, 194, 184, 47, 162, 34, 128, 0, 0, 0, 0, 58, 122, 46, 151, 44, 183, 229, 174, 222, 52, 39, 241, 159, 187, 195, 196, 180, 87, 8, 87, 5, 10, 226, 163, 24, 173, 146, 75, 130, 50, 0, 0, 0, 65, 213, 116, 218, 179, 107, 223, 132, 46, 75, 209, 158, 223, 71, 224, 85, 50, 41, 178, 139, 165, 85, 177, 113, 156, 95, 20, 120, 0, 0, 0, 0, 0, 74, 210, 50, 94, 30, 165, 70, 70, 251, 40, 205, 117, 191, 133, 240, 127, 67, 232, 235, 138, 32, 107, 249, 30, 107, 163, 228, 218, 158, 210, 234, 117, 99, 239, 124, 62, 231, 207, 64, 0, 0, 0, 0, 19, 180, 108, 7, 155, 147, 180, 183, 84, 195, 140, 223, 216, 182, 194, 49, 132, 20, 33, 21, 24, 165, 178, 75, 185, 25, 0, 0, 0, 0, 231, 235, 90, 122, 205, 199, 235, 65, 37, 124, 23, 160, 249, 248, 21, 54, 154, 109, 52, 211, 93, 169, 128, 0, 0, 0, 0, 48, 125, 19, 163, 249, 30, 117, 163, 227, 218, 222, 242, 234, 117, 101, 239, 92, 62, 199, 43, 167, 87, 245, 112, 232, 199, 79, 215, 155, 147, 247, 37, 253, 74, 136, 0, 0, 0, 0, 25, 140, 92, 164, 163, 21, 188, 155, 217, 46, 108, 185, 233, 152, 177, 195, 195, 133, 43, 110, 183, 108, 223, 57, 119, 146, 0, 0, 0, 0, 0, 173, 244, 155, 13, 85, 122, 202, 130, 244, 44, 123, 75, 194, 95, 212, 227, 128, 0, 0, 0, 0, 45, 221, 4, 191, 173, 135, 145, 142, 223, 169, 53, 37, 238, 107, 250, 28, 238, 155, 91, 215, 213, 97, 87, 117, 117, 47, 155, 109, 254, 14, 16, 0, 0, 0, 0, 29, 78, 140, 227, 121, 108, 247, 108, 150, 241, 165, 111, 241, 125, 133, 160, 0, 0, 0, 0, 1, 163, 81, 199, 89, 88, 86, 211, 223, 40, 250, 62, 245, 216, 82, 187, 56, 62, 12, 0, 0, 0, 0, 1, 221, 232, 69, 189, 77, 86, 117, 62, 203, 42, 127, 52, 247, 252, 144, 186, 73, 103, 148, 215, 50, 159, 41, 168, 252, 146, 71, 60, 0, 0, 0, 0, 11, 71, 69, 234, 242, 122, 107, 179, 110, 54, 77, 191, 130, 224, 142, 160, 0, 0, 0, 0, 0, 83, 181, 154, 124, 142, 167, 124, 18, 217, 57, 117, 151, 185, 241, 34, 0, 0, 0, 0, 1, 208, 232, 213, 158, 79, 92, 197, 124, 231, 213, 249, 166, 136, 218, 140, 252, 166, 163, 147, 63, 106, 217, 63, 171, 52, 0, 0, 0, 0, 1, 115, 210, 97, 212, 211, 49, 227, 255, 0, 26, 127, 62, 36, 144, 0, 0, 0, 0, 0, 173, 116, 170, 27, 106, 16, 159, 181, 90, 250, 54, 114, 0, 0, 0, 0, 0, 223, 166, 207, 201, 234, 56, 211, 246, 109, 139, 250, 154, 172, 125, 107, 39, 46, 114, 111, 234, 121, 0, 0, 0, 0, 24, 125, 133, 227, 7, 252, 149, 27, 127, 167, 31, 228, 109, 0, 0, 0, 0, 0, 10, 239, 75, 127, 204, 209, 255, 0, 173, 255, 0, 51, 138, 0, 0, 0, 0, 7, 170, 159, 86, 216, 75, 148, 147, 250, 158, 95, 107, 0, 0, 0, 0, 0, 92, 180, 137, 249, 77, 47, 30, 95, 241, 165, 242, 224, 74, 0, 0, 0, 0, 0, 10, 207, 74, 167, 214, 212, 33, 15, 102, 181, 245, 108, 228, 128, 0, 0, 0, 0, 93, 168, 245, 98, 234, 217, 56, 242, 147, 95, 83, 200, 0, 0, 0, 0, 22, 126, 139, 93, 215, 211, 229, 86, 252, 106, 155, 95, 7, 199, 242, 117, 64, 0, 0, 0, 0, 2, 155, 171, 221, 229, 245, 43, 236, 79, 117, 214, 234, 175, 114, 224, 69, 0, 0, 0, 0, 3, 213, 75, 173, 108, 35, 206, 73, 125, 77, 186, 140, 60, 158, 163, 147, 95, 179, 108, 151, 213, 154, 0, 0, 0, 0, 0, 233, 244, 111, 39, 200, 234, 30, 78, 79, 104, 220, 186, 191, 30, 226, 210, 0, 0, 0, 0, 0, 141, 169, 228, 172, 92, 27, 110, 253, 201, 109, 31, 123, 236, 41, 128, 0, 0, 0, 0, 13, 250, 108, 60, 166, 163, 141, 95, 181, 108, 87, 212, 147, 210, 74, 252, 158, 185, 148, 185, 205, 75, 230, 147, 57, 224, 0, 0, 0, 0, 34, 220, 90, 105, 236, 215, 20, 203, 150, 147, 150, 179, 48, 227, 110, 235, 174, 189, 25, 174, 76, 148, 0, 0, 0, 0, 5, 103, 164, 185, 138, 252, 149, 143, 91, 222, 21, 62, 62, 50, 254, 135, 36, 0, 0, 0, 0, 1, 208, 232, 213, 126, 83, 92, 197, 143, 41, 245, 190, 73, 178, 111, 77, 170, 234, 106, 176, 183, 186, 202, 151, 205, 54, 191, 7, 8, 0, 0, 0, 0, 1, 51, 72, 205, 150, 14, 79, 95, 139, 174, 92, 39, 30, 107, 159, 188, 183, 85, 56, 91, 92, 108, 174, 74, 81, 146, 221, 53, 222, 122, 0, 0, 0, 0, 230, 235, 154, 138, 196, 165, 213, 92, 191, 94, 107, 135, 251, 87, 50, 170, 0, 0, 0, 0, 0, 29, 222, 132, 85, 215, 213, 103, 111, 117, 117, 63, 155, 123, 126, 78, 143, 78, 168, 235, 97, 209, 144, 151, 169, 55, 23, 238, 107, 250, 21, 16, 0, 0, 0, 0, 0, 232, 232, 218, 156, 240, 167, 228, 231, 188, 232, 147, 226, 187, 227, 226, 139, 69, 22, 215, 117, 74, 218, 166, 167, 7, 216, 209, 236, 0, 0, 0, 231, 234, 250, 165, 120, 80, 112, 134, 211, 189, 174, 17, 238, 143, 139, 252, 21, 91, 108, 157, 182, 202, 203, 36, 229, 57, 61, 219, 103, 144, 0, 0, 0, 0, 0, 183, 116, 18, 142, 174, 30, 70, 67, 94, 188, 212, 87, 185, 47, 234, 117, 53, 252, 127, 58, 209, 242, 106, 75, 121, 117, 58, 209, 247, 174, 63, 99, 231, 160, 0, 0, 0, 0, 0, 36, 96, 102, 228, 97, 89, 214, 166, 92, 31, 173, 7, 216, 203, 30, 6, 177, 139, 146, 148, 103, 47, 35, 103, 179, 39, 193, 251, 153, 209, 0, 0, 107, 200, 190, 156, 120, 117, 238, 178, 53, 199, 155, 103, 11, 81, 215, 101, 52, 235, 195, 78, 11, 253, 71, 219, 240, 93, 199, 17, 182, 219, 109, 182, 223, 22, 223, 120, 0, 0, 0, 0, 0, 12, 31, 68, 232, 254, 63, 154, 232, 248, 245, 53, 180, 186, 157, 105, 123, 223, 18, 119, 113, 243, 141, 91, 25, 226, 106, 87, 227, 237, 178, 140, 223, 87, 248, 95, 21, 244, 100, 80, 0, 0, 0, 0, 0, 247, 77, 86, 221, 46, 173, 85, 206, 199, 202, 43, 114, 126, 62, 135, 157, 111, 25, 198, 21, 47, 247, 203, 143, 201, 29, 125, 63, 76, 200, 197, 75, 255, 0, 33, 103, 87, 216, 81, 78, 63, 83, 166, 187, 56, 189, 192, 6, 156, 186, 175, 182, 27, 83, 148, 232, 124, 212, 19, 56, 89, 122, 30, 116, 164, 236, 87, 195, 34, 92, 229, 38, 159, 212, 230, 228, 97, 229, 99, 255, 0, 141, 68, 224, 185, 237, 186, 249, 154, 0, 0, 0, 0, 0, 0, 74, 210, 49, 158, 102, 165, 70, 62, 219, 169, 77, 117, 191, 133, 113, 127, 68, 125, 29, 112, 64, 170, 116, 231, 19, 105, 211, 155, 21, 193, 254, 156, 255, 0, 154, 251, 149, 144, 0, 0, 0, 0, 38, 96, 105, 153, 121, 126, 148, 33, 213, 175, 219, 159, 5, 253, 78, 222, 30, 133, 137, 78, 210, 185, 187, 229, 227, 194, 63, 35, 169, 92, 33, 92, 122, 149, 194, 48, 143, 40, 173, 145, 144, 0, 0, 15, 2, 22, 94, 149, 133, 145, 187, 149, 74, 185, 191, 221, 14, 15, 240, 113, 115, 116, 60, 154, 83, 149, 45, 95, 5, 203, 132, 151, 195, 188, 229, 52, 211, 105, 166, 154, 237, 76, 0, 0, 0, 0, 1, 102, 232, 46, 38, 243, 187, 54, 75, 130, 253, 56, 123, 251, 95, 216, 181, 130, 46, 173, 136, 179, 116, 235, 177, 158, 219, 202, 62, 139, 229, 37, 216, 124, 230, 81, 148, 100, 227, 36, 212, 162, 246, 105, 247, 51, 0, 0, 0, 0, 219, 139, 141, 118, 85, 190, 78, 136, 57, 203, 191, 146, 247, 150, 45, 55, 69, 163, 31, 105, 228, 109, 117, 190, 43, 209, 95, 14, 255, 0, 137, 213, 0, 0, 0, 0, 0, 68, 207, 211, 241, 179, 35, 250, 176, 218, 125, 211, 143, 6, 191, 37, 111, 82, 211, 50, 48, 155, 148, 151, 94, 174, 235, 35, 217, 241, 228, 66, 0, 0, 0, 0, 204, 35, 41, 201, 70, 41, 185, 55, 178, 75, 189, 159, 70, 210, 49, 22, 14, 157, 86, 50, 219, 120, 199, 210, 124, 228, 251, 73, 64, 20, 174, 152, 224, 121, 190, 161, 231, 48, 95, 167, 127, 23, 225, 46, 255, 0, 159, 111, 204, 225, 128, 0, 0, 19, 244, 157, 50, 220, 233, 117, 158, 240, 165, 62, 51, 231, 224, 139, 70, 38, 53, 56, 181, 42, 168, 130, 140, 126, 175, 197, 155, 64, 0, 0, 0, 0, 0, 36, 148, 162, 227, 36, 154, 124, 26, 125, 229, 127, 87, 209, 122, 170, 87, 225, 71, 117, 219, 42, 185, 123, 191, 7, 12, 0, 0, 0, 29, 206, 134, 224, 121, 198, 160, 242, 102, 183, 174, 142, 43, 198, 93, 223, 46, 223, 145, 117, 0, 16, 245, 140, 40, 231, 233, 246, 99, 189, 148, 154, 222, 15, 148, 151, 99, 255, 0, 188, 207, 157, 217, 9, 215, 100, 171, 178, 46, 51, 139, 106, 73, 247, 52, 96, 0, 0, 58, 122, 38, 151, 44, 201, 121, 91, 119, 141, 9, 252, 102, 249, 34, 209, 92, 35, 92, 20, 33, 21, 24, 197, 108, 146, 92, 17, 144, 0, 0, 0, 0, 0, 0, 14, 62, 185, 164, 171, 148, 178, 113, 163, 181, 189, 178, 130, 253, 254, 62, 242, 182, 0, 0, 3, 53, 194, 118, 89, 26, 235, 139, 148, 228, 210, 138, 93, 236, 250, 38, 141, 133, 28, 13, 62, 188, 117, 179, 146, 91, 205, 243, 147, 237, 100, 192, 0, 42, 157, 51, 211, 122, 178, 254, 209, 166, 60, 30, 202, 228, 187, 159, 116, 190, 223, 34, 178, 0, 0, 159, 162, 233, 242, 206, 191, 121, 110, 169, 135, 174, 249, 248, 34, 217, 8, 198, 16, 80, 132, 84, 99, 21, 178, 75, 185, 25, 0, 0, 0, 0, 0, 0, 0, 3, 135, 210, 29, 51, 172, 165, 153, 143, 31, 73, 113, 178, 43, 191, 199, 242, 87, 192, 0, 2, 205, 208, 189, 55, 173, 39, 168, 221, 30, 11, 133, 41, 247, 190, 249, 125, 190, 101, 172, 0, 1, 230, 234, 225, 109, 82, 170, 200, 169, 66, 107, 105, 39, 222, 143, 159, 107, 122, 116, 244, 236, 217, 82, 247, 117, 190, 53, 203, 154, 252, 162, 8, 0, 219, 135, 143, 102, 86, 68, 40, 173, 122, 82, 125, 188, 151, 123, 46, 88, 152, 245, 226, 227, 198, 154, 150, 209, 138, 248, 183, 204, 218, 0, 0, 0, 0, 0, 0, 0, 0, 21, 109, 123, 79, 243, 75, 252, 173, 75, 244, 108, 124, 63, 218, 249, 28, 192, 0, 39, 104, 154, 116, 245, 28, 213, 74, 221, 87, 30, 54, 75, 146, 252, 179, 232, 52, 215, 10, 106, 141, 85, 197, 70, 17, 73, 69, 46, 228, 122, 0, 0, 8, 90, 206, 157, 94, 163, 135, 42, 103, 180, 102, 184, 215, 63, 101, 159, 63, 201, 162, 220, 107, 231, 69, 208, 112, 178, 15, 102, 141, 96, 22, 142, 142, 97, 121, 190, 47, 151, 154, 253, 91, 86, 254, 232, 247, 47, 185, 212, 0, 0, 0, 0, 0, 0, 0, 0, 1, 171, 51, 30, 25, 88, 211, 162, 206, 201, 46, 222, 79, 185, 148, 187, 234, 157, 23, 206, 155, 22, 211, 131, 217, 158, 0, 54, 98, 209, 110, 78, 68, 40, 166, 46, 86, 77, 236, 145, 244, 13, 27, 79, 175, 78, 195, 84, 195, 105, 77, 241, 178, 126, 211, 38, 128, 0, 0, 28, 142, 145, 232, 241, 212, 104, 242, 149, 37, 28, 152, 47, 69, 251, 75, 147, 40, 214, 66, 85, 206, 80, 156, 92, 101, 23, 180, 147, 92, 83, 48, 76, 209, 113, 60, 239, 58, 48, 146, 253, 56, 250, 83, 247, 46, 239, 137, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 11, 165, 56, 155, 168, 230, 65, 118, 122, 19, 251, 63, 177, 192, 6, 107, 132, 172, 156, 97, 8, 185, 74, 79, 100, 146, 226, 217, 121, 232, 230, 143, 29, 58, 143, 41, 110, 210, 201, 154, 244, 159, 178, 189, 148, 117, 192, 0, 0, 0, 56, 157, 35, 209, 35, 157, 7, 145, 142, 148, 114, 98, 190, 19, 92, 159, 143, 137, 74, 156, 39, 92, 229, 9, 197, 198, 81, 123, 52, 214, 205, 50, 207, 209, 156, 111, 35, 129, 229, 154, 244, 238, 123, 252, 59, 142, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 228, 211, 27, 241, 236, 166, 126, 172, 227, 179, 41, 54, 194, 85, 219, 58, 230, 182, 148, 27, 79, 222, 140, 87, 9, 89, 56, 194, 17, 114, 148, 158, 201, 37, 187, 108, 186, 244, 111, 68, 142, 12, 60, 227, 33, 41, 100, 201, 124, 32, 185, 47, 31, 19, 182, 0, 0, 0, 0, 7, 35, 94, 209, 41, 212, 99, 229, 96, 213, 121, 11, 135, 95, 110, 18, 92, 159, 228, 245, 26, 213, 81, 85, 40, 245, 84, 18, 73, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 205, 119, 6, 235, 53, 120, 199, 30, 185, 78, 87, 173, 210, 92, 215, 7, 246, 44, 61, 31, 209, 106, 211, 161, 229, 108, 218, 204, 150, 184, 203, 186, 62, 11, 242, 117, 192, 0, 0, 0, 0, 3, 93, 212, 198, 213, 199, 131, 238, 100, 27, 107, 157, 114, 218, 75, 220, 251, 153, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 77, 82, 181, 237, 21, 195, 189, 147, 105, 166, 21, 174, 11, 119, 207, 188, 216, 0, 0, 0, 0, 0, 0, 98, 81, 82, 77, 73, 38, 153, 18, 236, 86, 183, 117, 241, 92, 187, 200, 254, 6, 0, 0, 0, 0, 0, 0, 0, 0, 202, 77, 189, 146, 221, 146, 104, 197, 111, 141, 188, 60, 9, 113, 74, 43, 100, 182, 72, 0, 0, 0, 0, 0, 0, 0, 15, 22, 211, 11, 23, 164, 184, 243, 93, 164, 75, 113, 167, 14, 49, 244, 151, 135, 105, 160, 0, 0, 0, 0, 0, 0, 25, 92, 120, 35, 125, 88, 211, 151, 25, 122, 43, 234, 74, 170, 168, 86, 189, 21, 199, 159, 121, 236, 0, 0, 0, 0, 0, 0, 0, 0, 7, 139, 42, 174, 207, 90, 60, 121, 247, 145, 236, 196, 146, 227, 9, 111, 224, 205, 19, 174, 112, 245, 162, 209, 224, 0, 0, 0, 0, 15, 112, 174, 115, 245, 98, 217, 190, 188, 71, 219, 100, 182, 240, 68, 138, 234, 133, 126, 172, 82, 241, 61, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 174, 116, 85, 46, 216, 45, 249, 174, 6, 169, 98, 71, 246, 205, 175, 121, 174, 88, 182, 46, 199, 23, 241, 53, 186, 45, 95, 177, 252, 15, 46, 19, 93, 177, 151, 200, 198, 207, 145, 131, 59, 62, 76, 202, 132, 223, 100, 36, 254, 7, 184, 209, 107, 253, 143, 226, 123, 142, 45, 143, 181, 197, 27, 33, 137, 21, 235, 77, 191, 119, 3, 108, 41, 170, 29, 144, 95, 30, 38, 192, 0, 0, 0, 0, 0, 31, 255, 217 }
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ElementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ElementImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("ElementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ElementId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.LogsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ModuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "CanViewModule"
                        },
                        new
                        {
                            Id = 2,
                            Title = "CanStudyModule"
                        },
                        new
                        {
                            Id = 3,
                            Title = "CanAddModule"
                        },
                        new
                        {
                            Id = 4,
                            Title = "CanCreateModule"
                        },
                        new
                        {
                            Id = 5,
                            Title = "CanEditAnyModule"
                        },
                        new
                        {
                            Id = 6,
                            Title = "CanEditOwnModule"
                        },
                        new
                        {
                            Id = 7,
                            Title = "CanDeleteAnyModule"
                        },
                        new
                        {
                            Id = 8,
                            Title = "CanDeleteOwnModule"
                        },
                        new
                        {
                            Id = 9,
                            Title = "CanViewAnyModule"
                        },
                        new
                        {
                            Id = 10,
                            Title = "CanBlockModule"
                        },
                        new
                        {
                            Id = 11,
                            Title = "CanBlockUser"
                        },
                        new
                        {
                            Id = 12,
                            Title = "CanDeleteUser"
                        },
                        new
                        {
                            Id = 13,
                            Title = "CanEditOwnProfile"
                        },
                        new
                        {
                            Id = 14,
                            Title = "CanEditAnyProfile"
                        },
                        new
                        {
                            Id = 15,
                            Title = "CanViewOwnProfile"
                        },
                        new
                        {
                            Id = 16,
                            Title = "CanViewAnyProfile"
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfileEntities");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RefreshTokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FingerPrint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokenEntities");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NotVerifiedUser"
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 16
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.StatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Blocked"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Deleted"
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvatarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecoveryCode")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserModule", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrivateForMe")
                        .HasColumnType("boolean");

                    b.HasKey("ModuleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserModules", (string)null);
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ElementEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.ModuleEntity", "Module")
                        .WithMany("Elements")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ElementImageEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.ElementEntity", "Element")
                        .WithOne("Image")
                        .HasForeignKey("CardsServer.BLL.Entity.ElementImageEntity", "ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ModuleEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.UserEntity", "Creator")
                        .WithMany("CreatedModules")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ProfileEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.UserEntity", "User")
                        .WithOne("Profile")
                        .HasForeignKey("CardsServer.BLL.Entity.ProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RefreshTokenEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RolePermissionEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.PermissionEntity", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardsServer.BLL.Entity.RoleEntity", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.AvatarEntity", "Avatar")
                        .WithMany("Users")
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardsServer.BLL.Entity.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardsServer.BLL.Entity.StatusEntity", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserModule", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.ModuleEntity", "Module")
                        .WithMany("UserModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardsServer.BLL.Entity.UserEntity", "User")
                        .WithMany("UserModules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.AvatarEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ElementEntity", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.ModuleEntity", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("UserModules");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.PermissionEntity", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RoleEntity", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.StatusEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserEntity", b =>
                {
                    b.Navigation("CreatedModules");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserModules");
                });
#pragma warning restore 612, 618
        }
    }
}
